# docker 镜像
image: registry.d.com/cetiti/nodejs:latest-LTS-dev

variables:
  VERSION: "1.1.0-SNAPSHOT"

# 定义 stages 执行顺序
stages:
  - install
  - lint
  - build
  - deploy
# 确定缓存文件
cache:
  paths:
    - node_modules/
# 定义 jobs
install:
  stage: install
  script:
    - npm config set registry https://registry.npm.taobao.org
    - npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/
    - npm install
    
eslint:
  stage: lint
  script:
    - npm run lint
    
build:
  stage: build
  script:
    - npm run build
  artifacts:
    name: "${PROJECT_NAME}-${VERSION}"
    paths:
      - dist/
      - nginx/mgt.conf
      
deploy:dev:
  stage: deploy
  image: registry.d.com/cetiti/alpine:dev-latest
  before_script:
   ##
   ## Install ssh-agent if not already installed, it is required by Docker.
   ## (change apt-get to yum if you use an RPM-based image)
   ##
   
   - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
   ## We're using tr to fix line endings which makes ed25519 keys work
   ## without extra base64 encoding.
   ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
   ##
   - echo "${DEV_SERVER_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines.
   ##
   #- echo "$DEV_SERVER_IP" > ~/.ssh/known_hosts
   #- chmod 644 ~/.ssh/known_hosts

   ##
   ## Alternatively, use ssh-keyscan to scan the keys of your private server.
   ## Replace example.com with your private server's domain name. Repeat that
   ## command if you have more than one server to connect to.
   ##
   - ssh-keyscan ${DEV_SERVER_IP} >> ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts
  script:
    - scp -r dist root@${DEV_SERVER_IP}:${NGINX_PROJECT_PATH}
  only:
    - master
